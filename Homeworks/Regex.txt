
. - любой одиночный символ кроме символа конца строки.
[ ] - любой из них указаный в ковычках, либо диапазоны диапазоны в кавычках с дефисом( после ковычек и или а также, например .-лубой символ)
диапазон берется из латинского алфавита, можно указывать в буквах или цифрах.
$ - конец строки  например \. -екранированная точка в конце строки (  в реальной жизни можно использовать в заменах на,)
^ - начало строки   например ^ "  - меняем новую строку на ковычку и получаем массив (^T -находим строки которые начинаються с Т)
^[^b]-строки которые начинаються не с b(если ^стоит в кв скобках он означает отрицание).
\ - экранирование
\d - любую цифру ( \d-лубая цифра, \d\d -две любые цифры), тоже самое [0-9][0-9]( \d.\d -цифры а между ними другой символ )
\D - все что угодно, кроме цифр (например \d\D\d) цифры а между ними другой символ
\s - пробелы  (en\s пример хотим найти слова заканчивающиеся на en (указали en и что после него идет пробел)
\S - все кроме пробелов  (
\w - лубой буква или цифра (\s\w\w\w\s  пример слово из трех букв - пробелы в начале и конце)
\W - все кроме букв ( спец символы)
\b - граница слова
\B - не границ
\n- перенос строки
Что бы поупражняться взять большей текст и поупражняться

Квантификация
n{4} - пример искать n подряд 4 раза (\b\w{3}\b - пример хотим что бы символ повторялся 3 раза)
n{4,6} - пример искать от 4 до 6 вхождений символа n ( be{1,2} -которая содержит е от 1-го до 2-х раз)
* от нуля и выше ( пример be* -будет искать строки которые содержат b и e лубое колличество раз)
+ от 1 и выше  ( пример be+  - e теперь должно встречаться хотя бы один раз в комбинации с b) ( если хотим исключить - то b\+)
? - нуль или 1 раз ( be? -встречаеться либо 0 либо 1 раз)

Примеры:
\d{4} -любая цифра -4 раза должна повторяться
можно пробел делат ьпросто пробелом а можно указвать спец символ пробел например:
\d{4}\s\d{4}\s\d
В регулярных выражения можно ставить группировки , например либо дефис либо пробел, например:
\d{4}(\s|-\d{4}  это вырпажение соответствует 2233-4455 либо 2211 3333 ( в круглых скобках идет групировка что значит либо
то либо то)
Группировка пример 2
4 4
4-4    - соответствует \d[\s-]\d   -означает цифра потом либо пробел либо дефис потом снова цифра

Пример с телефоном:
 +38 (050)             ^\+[38\s(\d{3}\)  -паттерн

 Пример Как проверить имейлЖ
hello@gmail.com   пример   \w+@\w+\.\w+  ( какойто набор символов +1 раз, после него точка экранированная и снова набор символов


Вопрос как их применять в языках программирования.



Спец символы:
[]\^$.\?*+()
Construct	Matches
[0-9][a-z][a-zA-Z][0-9a-fA-F]

Наборы символов:



Characters
x	The character x
\\	The backslash character
\0n	The character with octal value 0n (0 <= n <= 7)
\0nn	The character with octal value 0nn (0 <= n <= 7)
\0mnn	The character with octal value 0mnn (0 <= m <= 3, 0 <= n <= 7)
\xhh	The character with hexadecimal value 0xhh
\uhhhh	The character with hexadecimal value 0xhhhh
\x{h...h}	The character with hexadecimal value 0xh...h (Character.MIN_CODE_POINT  <= 0xh...h <=  Character.MAX_CODE_POINT)
\t	The tab character ('\u0009')
\n	The newline (line feed) character ('\u000A')
\r	The carriage-return character ('\u000D')
\f	The form-feed character ('\u000C')
\a	The alert (bell) character ('\u0007')
\e	The escape character ('\u001B')
\cx	The control character corresponding to x

Character classes
[abc]	a, b, or c (simple class)
[^abc]	Any character except a, b, or c (negation)
[a-zA-Z]	a through z or A through Z, inclusive (range)
[a-d[m-p]]	a through d, or m through p: [a-dm-p] (union)
[a-z&&[def]]	d, e, or f (intersection)
[a-z&&[^bc]]	a through z, except for b and c: [ad-z] (subtraction)
[a-z&&[^m-p]]	a through z, and not m through p: [a-lq-z](subtraction)

Predefined character classes
.	Any character (may or may not match line terminators)
\d	A digit: [0-9]
\D	A non-digit: [^0-9]
\s	A whitespace character: [ \t\n\x0B\f\r]
\S	A non-whitespace character: [^\s]
\w	A word character: [a-zA-Z_0-9]
\W	A non-word character: [^\w]

POSIX character classes (US-ASCII only)
\p{Lower}	A lower-case alphabetic character: [a-z]
\p{Upper}	An upper-case alphabetic character:[A-Z]
\p{ASCII}	All ASCII:[\x00-\x7F]
\p{Alpha}	An alphabetic character:[\p{Lower}\p{Upper}]
\p{Digit}	A decimal digit: [0-9]
\p{Alnum}	An alphanumeric character:[\p{Alpha}\p{Digit}]
\p{Punct}	Punctuation: One of !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
\p{Graph}	A visible character: [\p{Alnum}\p{Punct}]
\p{Print}	A printable character: [\p{Graph}\x20]
\p{Blank}	A space or a tab: [ \t]
\p{Cntrl}	A control character: [\x00-\x1F\x7F]
\p{XDigit}	A hexadecimal digit: [0-9a-fA-F]
\p{Space}	A whitespace character: [ \t\n\x0B\f\r]

java.lang.Character classes (simple java character type)
\p{javaLowerCase}	Equivalent to java.lang.Character.isLowerCase()
\p{javaUpperCase}	Equivalent to java.lang.Character.isUpperCase()
\p{javaWhitespace}	Equivalent to java.lang.Character.isWhitespace()
\p{javaMirrored}	Equivalent to java.lang.Character.isMirrored()

Classes for Unicode scripts, blocks, categories and binary properties
\p{IsLatin}	A Latin script character (script)
\p{InGreek}	A character in the Greek block (block)
\p{Lu}	An uppercase letter (category)
\p{IsAlphabetic}	An alphabetic character (binary property)
\p{Sc}	A currency symbol
\P{InGreek}	Any character except one in the Greek block (negation)
[\p{L}&&[^\p{Lu}]] 	Any letter except an uppercase letter (subtraction)

Boundary matchers
^	The beginning of a line
$	The end of a line
\b	A word boundary
\B	A non-word boundary
\A	The beginning of the input
\G	The end of the previous match
\Z	The end of the input but for the final terminator, if any
\z	The end of the input

Greedy quantifiers
X?	X, once or not at all
X*	X, zero or more times
X+	X, one or more times
X{n}	X, exactly n times
X{n,}	X, at least n times
X{n,m}	X, at least n but not more than m times

Reluctant quantifiers
X??	X, once or not at all
X*?	X, zero or more times
X+?	X, one or more times
X{n}?	X, exactly n times
X{n,}?	X, at least n times
X{n,m}?	X, at least n but not more than m times

Possessive quantifiers
X?+	X, once or not at all
X*+	X, zero or more times
X++	X, one or more times
X{n}+	X, exactly n times
X{n,}+	X, at least n times
X{n,m}+	X, at least n but not more than m times

Logical operators
XY	X followed by Y
X|Y	Either X or Y
(X)	X, as a capturing group

Back references
\n	Whatever the nth capturing group matched
\k<name>	Whatever the named-capturing group "name" matched

Quotation
\	Nothing, but quotes the following character
\Q	Nothing, but quotes all characters until \E
\E	Nothing, but ends quoting started by \Q

Special constructs (named-capturing and non-capturing)
(?<name>X)	X, as a named-capturing group
(?:X)	X, as a non-capturing group
(?idmsuxU-idmsuxU) 	Nothing, but turns match flags i d m s u x U on - off
(?idmsux-idmsux:X)  	X, as a non-capturing group with the given flags i d m s u x on - off
(?=X)	X, via zero-width positive lookahead
(?!X)	X, via zero-width negative lookahead
(?<=X)	X, via zero-width positive lookbehind
(?<!X)	X, via zero-width negative lookbehind
(?>X)	X, as an independent, non-capturing group